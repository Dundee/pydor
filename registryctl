#!/usr/bin/env python

from __future__ import print_function
import click
import itertools
import requests.exceptions
import logging
import json

import registry as registry_lib
import tools.tablib

@click.group()
def cli():
    pass

def format(data, headers, format):
    if format == "text":
        for i in data:
            click.echo("- " + i[0])
    else:
        dataset = tablib.Dataset(headers=headers)
        map(dataset.append, data)
        click.echo(getattr(dataset, format))

def _list(generator, limit, output, insecure):
    try:
        if limit == 0:
            # list all
            items = [[n] for n in generator]
        else:
            items = [[n] for n in itertools.islice(generator, limit)]

        format(items, ["name"], output)
    except requests.exceptions.SSLError as e:
        logging.fatal(e.message)
        click.echo("Consider using --insecure")


@click.command()
@click.argument('REGISTRY')
@click.option('--limit', default=20, help='number of namespaces to show')
@click.option('--output', default='text', type=click.Choice(['text', 'json', 'yaml', 'html', "csv" ]))
@click.option('--insecure', default=False, is_flag=True)
def list(registry, limit, output, insecure):
    generator = registry_lib.API(registry, insecure=insecure).Catalog()
    _list(generator, limit, output, insecure)


def parse_image_name(image):
    registry, repository, tag = None, None, None
    domain_split_point = image.find('.')
    host_split_point = image.find('/')
    if domain_split_point != -1 and domain_split_point < host_split_point:
        registry = image[:host_split_point]
        rest = image[host_split_point+1:]
    else:
        rest = image

    tag_split_point = rest.find(':')
    if tag_split_point == -1:
        repository = rest
    else:
        repository = rest[:tag_split_point]
        tag = rest[tag_split_point+1:]

    assert repository != ''
    return registry, repository, tag


@click.command()
@click.argument('IMAGE')
@click.option('--limit', default=20, help='number of tags to show')
@click.option('--output', default='text', type=click.Choice(['text', 'json', 'yaml', 'html', "csv" ]))
@click.option('--insecure', default=False, is_flag=True)
def tags(image, limit, output, insecure):
    registry, namespace, _ = parse_image_name(image)

    if namespace is None or registry is None:
        raise Exception("Foo")
    generator = registry_lib.API(registry, insecure=insecure).Tags(namespace)
    _list(generator, limit, output, insecure)


@click.command()
@click.argument('TYPE')
@click.argument('IMAGE')
@click.option('--output', default='text', type=click.Choice(['text', 'json', 'yaml', 'html', "csv" ]))
@click.option('--insecure', default=False, is_flag=True)
def inspect(type, image, output, insecure):
    registry, namespace, tag = parse_image_name(image)

    if namespace is None or registry is None or tag is None:
        raise Exception("Foo")

    manifest = registry_lib.API(registry, insecure=insecure).Manifest(namespace, tag).get().json()
    labels = json.loads(manifest['history'][0]['v1Compatibility'])['container_config']['Labels']
    labels_to_format = map(lambda k: [k,labels[k]], labels)
    format(labels_to_format, ["name", "value"], output)

cli.add_command(list)
cli.add_command(tags)
cli.add_command(inspect)


if __name__ == '__main__':
    cli()